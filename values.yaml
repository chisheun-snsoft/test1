global:
  namespace: game-server
  ecr: 891612576809.dkr.ecr.ap-southeast-1.amazonaws.com
  secret:
    enabled: true
    token: aHZzLnduem03MEpKUTdBMHZrUHZveEduNG1pQg==
  serviceAccount:
    enabled: true
    name: mongo-sa
    arn: arn:aws:iam::941377153760:role/game-server-qat-mongo-role
microservices:
  - name: apiserver
    imageTag: 0.0.9
    ecrName: game-server/apiserver
    rollout:
      enabled: true
      canaryService: cmatch-apiserver-canary-canary-service
      stableService: cmatch-apiserver-canary-stable-service
      apisixRoute: qat-cmatch-apisix-route
      apisixRules: apiserver
      setCanaryScaleWeight: 2
      stepsSetWeight:
      - setWeight: 60
      - pause: { duration: 2m }
      - setWeight: 90
      - pause: { duration: 1m }
    replica: 2
    progressDeadlineSeconds: 600
    serviceAccountName: mongo-sa
    scaledObject:
      enabled: true
      minReplicaCount: 1
      maxReplicaCount: 200
      scaleUp:
        stabilizationWindowSeconds: 5 
        selectPolicy: Max
        pod:
          podNumber: 10
          seconds: 30
        percent:
          percentage: 100
          seconds: 60
        extraPolicies: []
      scaleDown:
        stabilizationWindowSeconds: 300
        selectPolicy: Min
        pod:
          podNumber: 4
          seconds: 60
        percent:
          percentage: 50
          seconds: 60
        extraPolicies: []
      cronOne:
        start: 00 08 * * *
        end: 00 19 * * *
        desiredReplicas: 1
      cronTwo: 
        start: 00 19 * * *
        end: 00 23 * * *
        desiredReplicas: 1
      cpu:
        utilization: 60
    nodeSelector:
      role : app 
    command: 
      - "/app/apiserver"
    args:
      - "-conf"
      - "/data/conf"
    ports: 
      - containerPort: 2000
        name: http
        protocol: TCP
    env:
      - name: TimeStamp
        value: "20250226072738"
      - name: VAULT_TOKEN
        valueFrom:
          secretKeyRef:
            name: vault-token
            key: VAULT_TOKEN
      - name: VAULT_DOMAIN
        value: "https://uat-vault.colorslot.org"

    volumeMounts:
    - name: config-volume
      mountPath: /data/conf  # Mount path in the container for config.yml
    volumes:
    - name: config-volume
      configMap:
        name: config-apiserver  # Reference to ConfigMap
    terminationMessagePath: ""
    terminationMessagePolicy: ""
    workingDir: /app
    dnsPolicy: ClusterFirst
    restartPolicy: Always
    terminationGracePeriodSeconds: 15
    limits:
      cpu: '4'
      memory: 6G
    requests:
      cpu: '2'
      memory: 4G
    startupProbe:
      enabled: false
    readinessProbe:
      enabled: false
    livenessProbe:
      enabled: false
      method: exec
      command:
        - /bin/grpc_health_probe
        - -addr=:2000
        - -rpc-timeout=5s
      initialDelaySeconds: 10
    # created service name will be -> <service-a>-<port_name>-service, can use kubectl get svc -n <namespace> to check
    services:
      # default values (type: ClusterIP, protocol: TCP, targetPort = Port)
      - name: cgslot-apiserver-service
        port: 2000
    ingress:
      enabled: true
      backendService: cgslot-apiserver-service
      port: 2000
      annotations:
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/target-type: ip
        alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:ap-southeast-1:891612576809:certificate/c5a059ce-e12d-4d1f-840b-fd96b26a3065
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
        alb.ingress.kubernetes.io/healthcheck-path: /home/health
        alb.ingress.kubernetes.io/healthcheck-port: "traffic-port"
        alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
        alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
        alb.ingress.kubernetes.io/healthcheck-timeout-seconds: "5"
        alb.ingress.kubernetes.io/healthy-threshold-count: "3"
        alb.ingress.kubernetes.io/unhealthy-threshold-count: "2"
